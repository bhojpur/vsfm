// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VsfmUIClient is the client API for VsfmUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VsfmUIClient interface {
	// ListVimSpecs returns a list of Virtualized Infrastructure Manager(s) that can be started through the UI.
	ListVimSpecs(ctx context.Context, in *ListVimSpecsRequest, opts ...grpc.CallOption) (VsfmUI_ListVimSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type vsfmUIClient struct {
	cc grpc.ClientConnInterface
}

func NewVsfmUIClient(cc grpc.ClientConnInterface) VsfmUIClient {
	return &vsfmUIClient{cc}
}

func (c *vsfmUIClient) ListVimSpecs(ctx context.Context, in *ListVimSpecsRequest, opts ...grpc.CallOption) (VsfmUI_ListVimSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VsfmUI_ServiceDesc.Streams[0], "/v1.VsfmUI/ListVimSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &vsfmUIListVimSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VsfmUI_ListVimSpecsClient interface {
	Recv() (*ListVimSpecsResponse, error)
	grpc.ClientStream
}

type vsfmUIListVimSpecsClient struct {
	grpc.ClientStream
}

func (x *vsfmUIListVimSpecsClient) Recv() (*ListVimSpecsResponse, error) {
	m := new(ListVimSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vsfmUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.VsfmUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VsfmUIServer is the server API for VsfmUI service.
// All implementations must embed UnimplementedVsfmUIServer
// for forward compatibility
type VsfmUIServer interface {
	// ListVimSpecs returns a list of Virtualized Infrastructure Manager(s) that can be started through the UI.
	ListVimSpecs(*ListVimSpecsRequest, VsfmUI_ListVimSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedVsfmUIServer()
}

// UnimplementedVsfmUIServer must be embedded to have forward compatible implementations.
type UnimplementedVsfmUIServer struct {
}

func (UnimplementedVsfmUIServer) ListVimSpecs(*ListVimSpecsRequest, VsfmUI_ListVimSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVimSpecs not implemented")
}
func (UnimplementedVsfmUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedVsfmUIServer) mustEmbedUnimplementedVsfmUIServer() {}

// UnsafeVsfmUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VsfmUIServer will
// result in compilation errors.
type UnsafeVsfmUIServer interface {
	mustEmbedUnimplementedVsfmUIServer()
}

func RegisterVsfmUIServer(s grpc.ServiceRegistrar, srv VsfmUIServer) {
	s.RegisterService(&VsfmUI_ServiceDesc, srv)
}

func _VsfmUI_ListVimSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVimSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VsfmUIServer).ListVimSpecs(m, &vsfmUIListVimSpecsServer{stream})
}

type VsfmUI_ListVimSpecsServer interface {
	Send(*ListVimSpecsResponse) error
	grpc.ServerStream
}

type vsfmUIListVimSpecsServer struct {
	grpc.ServerStream
}

func (x *vsfmUIListVimSpecsServer) Send(m *ListVimSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VsfmUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VsfmUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VsfmUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VsfmUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VsfmUI_ServiceDesc is the grpc.ServiceDesc for VsfmUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VsfmUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VsfmUI",
	HandlerType: (*VsfmUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _VsfmUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVimSpecs",
			Handler:       _VsfmUI_ListVimSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vsfm-ui.proto",
}
